import UtilExt from './UtilExt';

export default new (class UtilCommon {
    /**
     *
     * @desc 根据身份证号获取关键信息（生日/年龄/性别）
     * @param {string} idcard 身份证号码
     * @param {string|number} type 获取类别： 1-获取出生日期，2-获取性别，3-获取年龄
     * @returns {string|number}
     * @example
     * ('110110199201011010', 1) => '1992-01-01'
     * ('110110199201011010', 2) => 0-男 1-女
     * ('110110199201011010', 3) => 27-周岁
     */
    getIdCardKeys(idcard, type) {
        if (UtilExt.isEmpty(idcard)) {
            return "";
        }
        if (+type === 1) { // 获取出生日期
            var birthday = idcard.substring(6, 10) + "-" + idcard.substring(10, 12) + "-" + idcard.substring(12, 14);
            return birthday;
        }
        if (+type === 2) { // 获取性别
            var sex = 0;
            if (idcard.length === 18) {
                sex = parseInt(idcard.substr(16, 1));
            } else {
                sex = parseInt(idcard.substr(14, 1));
            }
            if (sex % 2 === 1) {
                return 0; //男
            } else {
                return 1; //女
            }
        }
        if (+type === 3) { // 获取年龄
            var myDate = new Date();
            var month = myDate.getMonth() + 1;
            var day = myDate.getDate();
            var age = myDate.getFullYear() - idcard.substring(6, 10) - 1;
            // eslint-disable-next-line no-mixed-operators
            if (idcard.substring(10, 12) < month || idcard.substring(10, 12) === month && idcard.substring(12, 14) <= day) {
                age++;
            }
            return age;
        }
    }

    /**
     * @description 获取假header
     * @memberof UtilCommon
     */
    getResponseHeader() {
        return {
            "channelSource": "101", // 100-wxMini 101-app
            "uid": "454",
            "clientIp": "",
            "clientName": "ios",
            "clientVersion": "1.3.1",
            "timestamp": "1586834575",
            "appId": "60103",
            "deviceId": "6F1B04D5-105B-44FC-A069-3BB47D780CC7",
            "deviceType": 2,
            "requestId": "",
            "version": "1.3.1",
            "token": "101_579f30c3f2fcbb71db059519ffecdbd8",
            "customerData": ""
        }
    }


    /**
     * @description rem转像素
     * @param {number} rem
     * @returns {number}
     */
    rem2px(rem) {
        const html = document.documentElement
        const ratio = parseFloat((html.currentStyle || getComputedStyle(html)).fontSize)
        return rem * ratio
    }

    /**
     * @description 像素转rem
     * @param {number} px
     * @returns {number}
     */
    px2rem(px) {
        const html = document.documentElement
        const ratio = parseFloat((html.currentStyle || getComputedStyle(html)).fontSize)
        return (px / ratio).toFixed(4)
    }

    /**
     * @description 获取uri参数
     * @param {string} [name] 获取key对应的value，若未传，则获取全部
     * @returns
     */
    urlQuery(name) {
        if (name) {
            const reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            const r = window.location.search.substr(1).match(reg);
            if (r != null) {
                return decodeURIComponent(r[2]);
            }

            return null;
        } else {
            const r = window.location.search.substr(1)
            let params = {};
            if (!r) return JSON.stringify(params)

            r.split('&').forEach(it => {
                const snippet = it.split('=')
                params[snippet[0]] = decodeURIComponent(snippet[1])
            })
            return JSON.stringify(params)
        }
    }

    /**
     * @description 获取固定尺寸图片链接
     * @param {string} url 图片链接
     * @param {number} type 尺寸类型
     * @returns
     */
    creatImgUrl(url, type) {
        if (UtilExt.isEmpty(url)) {
            return "";
        }
        let array = url.split(".");
        if (array.length < 2) {
            return url;
        }
        let imgUrl = "";
        switch (type) {
            case 1:
                imgUrl = this._returnImgStr(array, "_750_500");
                break;
            case 2:
                imgUrl = this._returnImgStr(array, "_600_200");
                break;
            case 3:
                imgUrl = this._returnImgStr(array, "_400_400");
                break;
            case 4:
                imgUrl = this._returnImgStr(array, "_300_200");
                break;
            case 5:
                imgUrl = this._returnImgStr(array, "_80_80");
                break;
            default:
                imgUrl = url;
        }
        return imgUrl;
    }

    _returnImgStr(array, str) {
        let imgStr = "";
        for (let i = 0; i < array.length; i++) {
            if (+i === array.length - 1) {
                imgStr += str;
            }
            if (+i !== 0) {
                imgStr += ".";
            }
            imgStr += array[i];
        }
        return imgStr;
    }
})()
