/**
 * @description 全局时间订阅 - 发布
 * @export instance
 * @class UtilEmitter
 */
let instance
let count = 0

class UtilEmitter {
    constructor() {
        this.subscribes = new Map()
    }

    addListener(key, fn) {
        const trace = ++count

        if (!this.subscribes.has(key)) {
            this.subscribes.set(key, {})
        }

        const uniqueEmitter = this.subscribes.get(key)
        uniqueEmitter[trace] = fn
        this.subscribes.set(key, uniqueEmitter)

        return trace
    }

    removeListener(id) {
        const keyArray = [...this.subscribes.entries()]
        let key = null
        for (let i = 0; i < keyArray.length; i++) {
            if (Object.prototype.toString.call(keyArray[i][1][id]) !== "[object Undefined]") {
                key = keyArray[i][0]
            }
        }
        if (!!key) {
            const uniqueEmitter = {...this.subscribes.get(key)}
            delete uniqueEmitter[id]
            this.subscribes.set(key, uniqueEmitter)
            return true
        } else {
            return false
        }
    }

    emit() {
        const arg = arguments;
        const key = [].shift.call(arg);
        const uniqueEmitter = this.subscribes.get(key) || {};
        const uniqueEmitterArray = Object.values(uniqueEmitter);

        if (!uniqueEmitterArray || uniqueEmitterArray.length <= 0) return false;

        for (var i = 0, len = uniqueEmitterArray.length; i < len; i++) {
            if (uniqueEmitterArray[i]) {
                // console.log('- - - - start - - - qiujieqiujie');
                // console.log(uniqueEmitterArray[i]);
                // console.log('- - - - end - - - qiujieqiujie');
                uniqueEmitterArray[i].apply(this, arg);
            }
        }
    }
}

export default (() => {
    if (!instance) instance = new UtilEmitter()
    return instance
})()
