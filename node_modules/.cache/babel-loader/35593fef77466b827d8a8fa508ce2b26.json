{"ast":null,"code":"/*is判断类*/\nlet UtilExtIs = {\n  //判断对象是否是数组\n  isArray: function (object) {\n    return Array.isArray(object);\n  },\n  //判断对象是否是对象\n  isObject: function (object) {\n    return Object.prototype.toString.call(object) === '[object Object]';\n  },\n  //判断对象是否是方法\n  isFunc: function (object) {\n    return typeof object == 'function';\n  },\n  //判断对象是否是Boolean\n  isBoolean: function (object) {\n    return typeof object == 'boolean';\n  },\n  //判断对象是否是Date对象\n  isDate: function (object) {\n    return object instanceof Date;\n  },\n  //判断对象是否是数字\n  isNumber: function (object) {\n    return typeof object == 'number';\n  },\n  //判断对象是否是字符串\n  isString: function (object) {\n    return typeof object == 'string';\n  },\n  //判断对象是否是数字\n  isNumberArray: function (object) {\n    return UtilExtIs.isArray(object) && UtilExtIs.isNumber(object[0]);\n  },\n  //判断对象是否是字符串\n  isStringArray: function (object) {\n    return UtilExtIs.isArray(object) && UtilExtIs.isString(object[0]);\n  },\n  //判断对象是否是字符串\n  isDateArray: function (object) {\n    return UtilExtIs.isArray(object) && UtilExtIs.isDate(object[0]);\n  },\n  //判断对象/数组/字符串是否无值\n  isEmpty: function (object) {\n    return !_.isHasValue(object);\n  },\n  //判断对象/数组/字符串是否有值\n  isHasValue: function (object) {\n    if (object) {\n      if (_.isArray(object)) {\n        return object.length > 0;\n      } else if (_.isObject(object)) {\n        return Object.keys(object).length > 0;\n      } else {\n        return !!object;\n      }\n    } else {\n      return false;\n    }\n  },\n  //判断是否为JSON字符串\n  isJSONString: function (str) {\n    if (typeof str == 'string') {\n      try {\n        let obj = JSON.parse(str);\n        return !!(typeof obj == 'object' && obj);\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n};\n/*数组or对象混合处理类\n * @callback iteratee 回调函数\n * @param {Object} current\n * @param {string} keyindex\n * @param {Object} original\n */\n\nlet UtilExtObject = {\n  //对象克隆\n  clone: function (object) {\n    return { ...object\n    };\n  },\n  //方法用于调用数组的每个元素，并将元素传递给回调函数\n  each: function (object, iteratee) {\n    if (_.isHasValue(object) && iteratee) {\n      if (_.isArray(object)) {\n        for (let i = 0; i < object.length; i++) {\n          if (iteratee(object[i], i, object) === false) {\n            break;\n          }\n        }\n      } else {\n        // eslint-disable-next-line no-unused-vars\n        for (let key in object) {\n          if (iteratee(object[key], key, object) === false) {\n            break;\n          }\n        }\n      }\n    }\n  },\n  //查找符合条件的第一条数据\n  find: function (object, iteratee) {\n    let result = null;\n\n    _.each(object, (current, keyindex, original) => {\n      if (iteratee(current, keyindex, original)) {\n        result = current;\n        return false;\n      } else {\n        return true;\n      }\n    });\n\n    return result;\n  },\n  //查找符合条件的所有数据\n  filter: function (object, iteratee) {\n    let isArray = _.isArray(object);\n\n    let result = isArray ? [] : {};\n\n    _.each(object, (current, keyindex, original) => {\n      if (iteratee(current, keyindex, original)) {\n        if (isArray) {\n          result.push(current);\n        } else {\n          result[keyindex] = current;\n        }\n      }\n    });\n\n    return result;\n  },\n  //方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\n  map: function (object, iteratee) {\n    let isArray = _.isArray(object);\n\n    let result = isArray ? [] : {};\n\n    _.each(object, (current, keyindex, original) => {\n      if (isArray) {\n        result.push(iteratee(current, keyindex, original));\n      } else {\n        result[keyindex] = iteratee(current, keyindex, original);\n      }\n    });\n\n    return result;\n  }\n}; // 数组处理类\n\nlet UtilExtArray = {\n  /**\n   * @desc 根据数组每项中的值作为key转为JSON\n   * @param {Array} [array] 原始数组\n   * @returns {Object} 转换后的对象\n   * @example\n   * [{id:1,name:'name1'},{id:2,name:'name2'}].arrayToJson('id') => {1:{id:1,name:'name1'},2:{id:2,name:'name2'}}\n   */\n  arrayToJson: function (array = [], key) {\n    let result = {};\n    let obj = null;\n\n    if (array.length > 0) {\n      for (let i = 0; i < array.length; i++) {\n        obj = array[i][key];\n        typeof obj != \"undefined\" && (result[obj] = array[i]);\n      }\n    }\n\n    return result;\n  },\n  //数组去重\n  uniq: function (array = []) {\n    let result = []; // eslint-disable-next-line no-unused-vars\n\n    for (let i of array) {\n      if (result.indexOf(i) === -1) {\n        result.push(i);\n      }\n    }\n\n    return result;\n  },\n  //数组取合集(顺序以第一个数组为准)\n  union: function (...array) {\n    let result = []; // eslint-disable-next-line no-unused-vars\n\n    for (let i of array) {\n      result.push(...i);\n    }\n\n    return _.uniq(result);\n  },\n  //数组取交集(顺序以第一个数组为准)\n  intersection: function (...array) {\n    let result = [];\n    let min = array.sort((a, b) => {\n      return a.length - b.length;\n    })[0]; // eslint-disable-next-line no-unused-vars\n\n    for (let i of min) {\n      let isUse = true; // eslint-disable-next-line no-unused-vars\n\n      for (let arr of array) {\n        if (arr.indexOf(i) === -1) {\n          isUse = false;\n          break;\n        }\n      }\n\n      isUse && result.push(i);\n    }\n\n    result.sort((a, b) => {\n      return array[0].indexOf(a) - array[0].indexOf(b);\n    });\n    return result;\n  }\n}; // 字符串处理类\n\nlet UtilExtString = {\n  /**\n   * @desc 将 Date/String 转化为指定格式的String\n   * @summary\n   * 季度(q)、月(M) 、日(d) 、周(E=二,EE=周二,EEE=星期二)、时(h=12小时,H=24小时) 、分(m) 、秒(s) 、毫秒(S)\n   * tips:可以用 1 - 2 个占位符 * 年(y)可以用 1 - 4 个占位符，毫秒(S)只能用 1 个占位符(是 1 - 3 位的数字)\n   * @param {(String|Date)} object 需要格式化的对象\n   * @param {((Array|Object)|String)} ...args 格式化规则\n   * @returns {string} 格式化后的时间字符串\n   * @example\n   * Date:\n   * 1. UtilExtString.format(new Date(), \"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n   * 2. UtilExtString.format(new Date(), \"yyyy-MM-dd EEE hh:mm:ss\") ==> 2009-03-10 星期二 08:09:04\n   * 3. UtilExtString.format(new Date(), \"yyyy-M-d h:m:s.S\") ==> 2006-7-2 8:9:4.18\n   * 4. UtilExtString.format(new Date()) ==> 2006-7-2 08:10  默认格式： \"yyyy-M-d HH:mm\"\n   * String:\n   * 1. UtilExtString.format(\"{0} hello {1}\", \"hulk\",\"world\") => \"hulk hello world\"\n   * 2. UtilExtString.format(\"{name} hello {value}\", {name: \"hulk\",value: \"world\"}) => \"hulk hello world\"\n   */\n  format: function (object, ...args) {\n    //分别处理string和Date两种场景\n    const handleStringJoin = (object, args) => {\n      if (args.length === 1 && typeof args[0] == \"object\") {\n        // eslint-disable-next-line no-unused-vars\n        for (let key in args[0]) {\n          object = object.replace(new RegExp(\"({\" + key + \"})\", \"g\"), args[0][key] || \"\");\n        }\n      } else {\n        for (let i = 0; i < args.length; i++) {\n          object = object.replace(new RegExp(\"({[\" + i + \"]})\", \"g\"), args[i] || \"\");\n        }\n      }\n\n      return object;\n    };\n\n    const handleDateFormat = (object, args) => {\n      let fmtstr = args[0] || \"yyyy-MM-dd\";\n      let week = {\n        \"0\": '\\u65e5',\n        \"1\": '\\u4e00',\n        \"2\": '\\u4e8c',\n        \"3\": '\\u4e09',\n        \"4\": '\\u56db',\n        \"5\": '\\u4e94',\n        \"6\": '\\u516d'\n      };\n      let o = {\n        \"M+\": object.getMonth() + 1,\n        //月份\n        \"d+\": object.getDate(),\n        //日\n        \"h+\": object.getHours() % 12 === 0 ? 12 : object.getHours() % 12,\n        //小时\n        \"H+\": object.getHours(),\n        //小时\n        \"m+\": object.getMinutes(),\n        //分\n        \"s+\": object.getSeconds(),\n        //秒\n        \"q+\": Math.floor((object.getMonth() + 3) / 3),\n        //季度\n        \"S\": object.getMilliseconds() //毫秒\n\n      };\n\n      if (/(y+)/.test(fmtstr)) {\n        fmtstr = fmtstr.replace(RegExp.$1, (object.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n      }\n\n      if (/(E+)/.test(fmtstr)) {\n        fmtstr = fmtstr.replace(RegExp.$1, (RegExp.$1.length > 1 ? RegExp.$1.length > 2 ? '\\u661f\\u671f' : '\\u5468' : \"\") + week[object.getDay() + \"\"]);\n      } // eslint-disable-next-line no-unused-vars\n\n\n      for (let k in o) {\n        if (new RegExp(\"(\" + k + \")\").test(fmtstr)) {\n          fmtstr = fmtstr.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n        }\n      }\n\n      return fmtstr;\n    };\n\n    if (object instanceof Date) {\n      return handleDateFormat(object, args);\n    } else if (args.length > 0) {\n      try {\n        const dateLike = new Date(_.isString(object) ? Number.isNaN(+object) ? this.parseDate(object) : +object : object);\n        return handleDateFormat(dateLike, args);\n      } catch (e) {\n        console.error(`error on format: ${object} - ${e}`);\n        return handleStringJoin(object, args);\n      }\n    } else {\n      return object;\n    }\n  },\n  //字符串转日期对象\n  parseDate: function (str) {\n    return new Date(str.replace(/-/g, \"/\"));\n  },\n  //字符串转化为JSON\n  parseJson: function (str) {\n    // eslint-disable-next-line no-eval\n    return str ? eval(\"(\" + str + \")\") : {};\n  },\n  //经纬度String类型格式化为Number类型\n  parseLatLng: function (str) {\n    return !isNaN(str) ? parseFloat(str) : 0;\n  },\n  // 手机号码加*\n  parseMobile: function (tel) {\n    if (tel) {\n      tel += '';\n      return tel.substr(0, 3) + '****' + tel.substr(-4);\n    } else {\n      return '';\n    }\n  },\n\n  // 获取字符串长度(汉字算两个字符,字母数字算一个)\n  parseByteLen(str) {\n    var len = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      var a = str.charAt(i); // eslint-disable-next-line no-control-regex\n\n      if (a.match(/[^\\x00-\\xff]/ig) != null) {\n        len += 1;\n      } else {\n        len += .5;\n      }\n    }\n\n    return len;\n  }\n\n};\nlet UtilExtDate = {\n  /**\n   * @desc  Date时间增加操作\n   * @param {Date} [dateTime] 原始时间\n   * @param {Object} json 需要添加的数量，可为负数\n   * @param {int} json.month 月\n   * @param {int} json.day 日\n   * @param {int} json.hour 时\n   * @param {int} json.minute 分\n   * @param {int} json.second 秒\n   * @returns {Date} 操作后的时间\n   */\n  timeAdd: function (dateTime, {\n    month,\n    day,\n    hour,\n    minute,\n    second\n  }) {\n    let newDT = new Date(dateTime);\n    month && newDT.setMonth(dateTime.getMonth() + month);\n    day && newDT.setDate(dateTime.getDate() + day);\n    hour && newDT.setHours(dateTime.getHours() + hour);\n    minute && newDT.setMinutes(dateTime.getMinutes() + minute);\n    second && newDT.setSeconds(dateTime.getSeconds() + second);\n    return newDT;\n  },\n\n  /**\n   * @desc 分钟向下取整\n   * @param {Date} [dateTime] 原始时间\n   * @param {int} [minute=10] 取整的分钟数\n   * @returns {Date} 操作后的时间\n   */\n  timeFloor: function (dateTime, minute = 10) {\n    let newDT = new Date(dateTime);\n    newDT.setMinutes(Math.floor(dateTime.getMinutes() / minute) * minute);\n    return newDT;\n  },\n\n  /**\n   * @desc 分钟向上取整\n   * @param {Date} [dateTime] 原始时间\n   * @param {int} [minute=10] 取整的分钟数\n   * @returns {Date} 操作后的时间\n   */\n  timeCeil: function (dateTime, minute = 10) {\n    dateTime.setMinutes(Math.ceil(dateTime.getMinutes() / minute) * minute);\n    return dateTime;\n  }\n};\nlet UtilExtFunction = {\n  /**\n   * @desc 节流函数（{delay}毫秒内任意次调用都只执行第一次）\n   * @param {int} [delay] 节流毫秒数\n   * @param {function} [action] 执行方法\n   * @returns {function} 节流后的方法\n   */\n  throttle: function (delay, action) {\n    let last = 0;\n    return function () {\n      let curr = +new Date();\n\n      if (curr - last > delay) {\n        action.apply(this, arguments);\n        last = curr;\n      }\n    };\n  },\n\n  /**\n   * @desc 防抖函数（{delay}毫秒内任意次调用都只执行最后一次）\n   * @param {int} [delay] 毫秒数\n   * @param {function} [action] 执行方法\n   * @returns {function} 防抖函数\n   */\n  debounce: function (delay, action) {\n    let last;\n    return function () {\n      let ctx = this,\n          args = arguments;\n      clearTimeout(last);\n      last = setTimeout(function () {\n        action.apply(ctx, args);\n      }, delay);\n    };\n  }\n};\nlet _ = { ...UtilExtIs,\n  ...UtilExtDate,\n  ...UtilExtArray,\n  ...UtilExtString,\n  ...UtilExtObject,\n  ...UtilExtFunction\n};\nexport default _;","map":{"version":3,"sources":["/Users/guolongfei/Documents/Project2/PublicUse/node_modules/npmglf/lib/utils/UtilExt.js"],"names":["UtilExtIs","isArray","object","Array","isObject","Object","prototype","toString","call","isFunc","isBoolean","isDate","Date","isNumber","isString","isNumberArray","isStringArray","isDateArray","isEmpty","_","isHasValue","length","keys","isJSONString","str","obj","JSON","parse","e","UtilExtObject","clone","each","iteratee","i","key","find","result","current","keyindex","original","filter","push","map","UtilExtArray","arrayToJson","array","uniq","indexOf","union","intersection","min","sort","a","b","isUse","arr","UtilExtString","format","args","handleStringJoin","replace","RegExp","handleDateFormat","fmtstr","week","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","test","$1","getFullYear","substr","getDay","k","dateLike","Number","isNaN","parseDate","console","error","parseJson","eval","parseLatLng","parseFloat","parseMobile","tel","parseByteLen","len","charAt","match","UtilExtDate","timeAdd","dateTime","month","day","hour","minute","second","newDT","setMonth","setDate","setHours","setMinutes","setSeconds","timeFloor","timeCeil","ceil","UtilExtFunction","throttle","delay","action","last","curr","apply","arguments","debounce","ctx","clearTimeout","setTimeout"],"mappings":"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","sourcesContent":["/*is判断类*/\nlet UtilExtIs = {\n    //判断对象是否是数组\n    isArray: function (object) {\n        return Array.isArray(object)\n    },\n    //判断对象是否是对象\n    isObject: function (object) {\n        return Object.prototype.toString.call(object) === '[object Object]'\n    },\n    //判断对象是否是方法\n    isFunc: function (object) {\n        return typeof object == 'function'\n    },\n    //判断对象是否是Boolean\n    isBoolean: function (object) {\n        return typeof object == 'boolean'\n    },\n    //判断对象是否是Date对象\n    isDate: function (object) {\n        return object instanceof Date\n    },\n    //判断对象是否是数字\n    isNumber: function (object) {\n        return typeof object == 'number'\n    },\n    //判断对象是否是字符串\n    isString: function (object) {\n        return typeof object == 'string'\n    },\n    //判断对象是否是数字\n    isNumberArray: function (object) {\n        return UtilExtIs.isArray(object) && UtilExtIs.isNumber(object[0])\n    },\n    //判断对象是否是字符串\n    isStringArray: function (object) {\n        return UtilExtIs.isArray(object) && UtilExtIs.isString(object[0])\n    },\n    //判断对象是否是字符串\n    isDateArray: function (object) {\n        return UtilExtIs.isArray(object) && UtilExtIs.isDate(object[0])\n    },\n    //判断对象/数组/字符串是否无值\n    isEmpty: function (object) {\n        return !_.isHasValue(object)\n    },\n    //判断对象/数组/字符串是否有值\n    isHasValue: function (object) {\n        if (object) {\n            if (_.isArray(object)) {\n                return object.length > 0;\n            } else if (_.isObject(object)) {\n                return Object.keys(object).length > 0;\n            } else {\n                return !!object;\n            }\n        } else {\n            return false;\n        }\n    },\n    //判断是否为JSON字符串\n    isJSONString: function (str) {\n        if (typeof str == 'string') {\n            try {\n                let obj = JSON.parse(str);\n                return !!(typeof obj == 'object' && obj);\n            } catch (e) {\n                return false;\n            }\n        }\n    }\n};\n\n/*数组or对象混合处理类\n * @callback iteratee 回调函数\n * @param {Object} current\n * @param {string} keyindex\n * @param {Object} original\n */\nlet UtilExtObject = {\n    //对象克隆\n    clone: function (object) {\n        return {...object}\n    },\n\n    //方法用于调用数组的每个元素，并将元素传递给回调函数\n    each: function (object, iteratee) {\n        if (_.isHasValue(object) && iteratee) {\n            if (_.isArray(object)) {\n                for (let i = 0; i < object.length; i++) {\n                    if (iteratee(object[i], i, object) === false) {\n                        break;\n                    }\n                }\n            } else {\n                // eslint-disable-next-line no-unused-vars\n                for (let key in object) {\n                    if (iteratee(object[key], key, object) === false) {\n                        break;\n                    }\n                }\n            }\n        }\n    },\n\n    //查找符合条件的第一条数据\n    find: function (object, iteratee) {\n        let result = null;\n        _.each(object, (current, keyindex, original) => {\n            if (iteratee(current, keyindex, original)) {\n                result = current;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return result;\n    },\n\n    //查找符合条件的所有数据\n    filter: function (object, iteratee) {\n        let isArray = _.isArray(object);\n        let result = isArray ? [] : {};\n        _.each(object, (current, keyindex, original) => {\n            if (iteratee(current, keyindex, original)) {\n                if (isArray) {\n                    result.push(current);\n                } else {\n                    result[keyindex] = current;\n                }\n            }\n        });\n        return result;\n    },\n\n    //方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\n    map: function (object, iteratee) {\n        let isArray = _.isArray(object);\n        let result = isArray ? [] : {};\n        _.each(object, (current, keyindex, original) => {\n            if (isArray) {\n                result.push(iteratee(current, keyindex, original));\n            } else {\n                result[keyindex] = iteratee(current, keyindex, original);\n            }\n        });\n        return result;\n    }\n}\n\n// 数组处理类\nlet UtilExtArray = {\n    /**\n     * @desc 根据数组每项中的值作为key转为JSON\n     * @param {Array} [array] 原始数组\n     * @returns {Object} 转换后的对象\n     * @example\n     * [{id:1,name:'name1'},{id:2,name:'name2'}].arrayToJson('id') => {1:{id:1,name:'name1'},2:{id:2,name:'name2'}}\n     */\n    arrayToJson: function (array = [], key) {\n        let result = {};\n        let obj = null;\n        if (array.length > 0) {\n            for (let i = 0; i < array.length; i++) {\n                obj = array[i][key];\n                (typeof obj != \"undefined\") && (result[obj] = array[i]);\n            }\n        }\n        return result;\n    },\n\n    //数组去重\n    uniq: function (array = []) {\n        let result = [];\n        // eslint-disable-next-line no-unused-vars\n        for (let i of array) {\n            if (result.indexOf(i) === -1) {\n                result.push(i);\n            }\n        }\n        return result;\n    },\n\n    //数组取合集(顺序以第一个数组为准)\n    union: function (...array) {\n        let result = [];\n        // eslint-disable-next-line no-unused-vars\n        for (let i of array) {\n            result.push(...i);\n        }\n        return _.uniq(result);\n    },\n\n    //数组取交集(顺序以第一个数组为准)\n    intersection: function (...array) {\n        let result = [];\n        let min = array.sort((a, b) => {\n            return a.length - b.length;\n        })[0];\n        // eslint-disable-next-line no-unused-vars\n        for (let i of min) {\n            let isUse = true;\n            // eslint-disable-next-line no-unused-vars\n            for (let arr of array) {\n                if (arr.indexOf(i) === -1) {\n                    isUse = false;\n                    break;\n                }\n            }\n            isUse && result.push(i);\n        }\n        result.sort((a, b) => {\n            return array[0].indexOf(a) - array[0].indexOf(b);\n        });\n        return result;\n    }\n};\n\n// 字符串处理类\nlet UtilExtString = {\n    /**\n     * @desc 将 Date/String 转化为指定格式的String\n     * @summary\n     * 季度(q)、月(M) 、日(d) 、周(E=二,EE=周二,EEE=星期二)、时(h=12小时,H=24小时) 、分(m) 、秒(s) 、毫秒(S)\n     * tips:可以用 1 - 2 个占位符 * 年(y)可以用 1 - 4 个占位符，毫秒(S)只能用 1 个占位符(是 1 - 3 位的数字)\n     * @param {(String|Date)} object 需要格式化的对象\n     * @param {((Array|Object)|String)} ...args 格式化规则\n     * @returns {string} 格式化后的时间字符串\n     * @example\n     * Date:\n     * 1. UtilExtString.format(new Date(), \"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n     * 2. UtilExtString.format(new Date(), \"yyyy-MM-dd EEE hh:mm:ss\") ==> 2009-03-10 星期二 08:09:04\n     * 3. UtilExtString.format(new Date(), \"yyyy-M-d h:m:s.S\") ==> 2006-7-2 8:9:4.18\n     * 4. UtilExtString.format(new Date()) ==> 2006-7-2 08:10  默认格式： \"yyyy-M-d HH:mm\"\n     * String:\n     * 1. UtilExtString.format(\"{0} hello {1}\", \"hulk\",\"world\") => \"hulk hello world\"\n     * 2. UtilExtString.format(\"{name} hello {value}\", {name: \"hulk\",value: \"world\"}) => \"hulk hello world\"\n     */\n    format: function (object, ...args) {\n        //分别处理string和Date两种场景\n        const handleStringJoin = (object, args) => {\n            if (args.length === 1 && typeof (args[0]) == \"object\") {\n                // eslint-disable-next-line no-unused-vars\n                for (let key in args[0]) {\n                    object = object.replace(new RegExp(\"({\" + key + \"})\", \"g\"), args[0][key] || \"\");\n                }\n            } else {\n                for (let i = 0; i < args.length; i++) {\n                    object = object.replace(new RegExp(\"({[\" + i + \"]})\", \"g\"), args[i] || \"\");\n                }\n            }\n            return object;\n        }\n\n        const handleDateFormat = (object, args) => {\n            let fmtstr = args[0] || \"yyyy-MM-dd\";\n            let week = {\n                \"0\": '\\u65e5',\n                \"1\": '\\u4e00',\n                \"2\": '\\u4e8c',\n                \"3\": '\\u4e09',\n                \"4\": '\\u56db',\n                \"5\": '\\u4e94',\n                \"6\": '\\u516d'\n            };\n            let o = {\n                \"M+\": object.getMonth() + 1, //月份\n                \"d+\": object.getDate(), //日\n                \"h+\": object.getHours() % 12 === 0 ? 12 : object.getHours() % 12, //小时\n                \"H+\": object.getHours(), //小时\n                \"m+\": object.getMinutes(), //分\n                \"s+\": object.getSeconds(), //秒\n                \"q+\": Math.floor((object.getMonth() + 3) / 3), //季度\n                \"S\": object.getMilliseconds() //毫秒\n            };\n            if (/(y+)/.test(fmtstr)) {\n                fmtstr = fmtstr.replace(RegExp.$1, (object.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n            }\n            if (/(E+)/.test(fmtstr)) {\n                fmtstr = fmtstr.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? '\\u661f\\u671f' : '\\u5468') : \"\") + week[object.getDay() + \"\"]);\n            }\n            // eslint-disable-next-line no-unused-vars\n            for (let k in o) {\n                if (new RegExp(\"(\" + k + \")\").test(fmtstr)) {\n                    fmtstr = fmtstr.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n                }\n            }\n            return fmtstr;\n        }\n        if (object instanceof Date) {\n            return handleDateFormat(object, args)\n        } else if (args.length > 0) {\n            try {\n                const dateLike = new Date(_.isString(object) ? (Number.isNaN(+object) ? this.parseDate(object) : +object) : object)\n                return handleDateFormat(dateLike, args)\n            } catch (e) {\n                console.error(`error on format: ${object} - ${e}`);\n                return handleStringJoin(object, args)\n            }\n\n        } else {\n            return object;\n        }\n    },\n\n    //字符串转日期对象\n    parseDate: function (str) {\n        return new Date(str.replace(/-/g, \"/\"))\n    },\n\n    //字符串转化为JSON\n    parseJson: function (str) {\n        // eslint-disable-next-line no-eval\n        return str ? eval(\"(\" + str + \")\") : {}\n    },\n\n    //经纬度String类型格式化为Number类型\n    parseLatLng: function (str) {\n        return !isNaN(str) ? parseFloat(str) : 0;\n    },\n\n    // 手机号码加*\n    parseMobile: function (tel) {\n        if (tel) {\n            tel += ''\n            return tel.substr(0, 3) + '****' + tel.substr(-4)\n        } else {\n            return ''\n        }\n    },\n\n    // 获取字符串长度(汉字算两个字符,字母数字算一个)\n    parseByteLen(str) {\n        var len = 0;\n        for (var i = 0; i < str.length; i++) {\n            var a = str.charAt(i);\n            // eslint-disable-next-line no-control-regex\n            if (a.match(/[^\\x00-\\xff]/ig) != null) {\n                len += 1;\n            } else {\n                len += .5;\n            }\n        }\n        return len;\n    },\n};\n\nlet UtilExtDate = {\n    /**\n     * @desc  Date时间增加操作\n     * @param {Date} [dateTime] 原始时间\n     * @param {Object} json 需要添加的数量，可为负数\n     * @param {int} json.month 月\n     * @param {int} json.day 日\n     * @param {int} json.hour 时\n     * @param {int} json.minute 分\n     * @param {int} json.second 秒\n     * @returns {Date} 操作后的时间\n     */\n    timeAdd: function (dateTime, {month, day, hour, minute, second}) {\n        let newDT = new Date(dateTime);\n        month && newDT.setMonth(dateTime.getMonth() + month);\n        day && newDT.setDate(dateTime.getDate() + day);\n        hour && newDT.setHours(dateTime.getHours() + hour);\n        minute && newDT.setMinutes(dateTime.getMinutes() + minute);\n        second && newDT.setSeconds(dateTime.getSeconds() + second);\n        return newDT;\n    },\n    /**\n     * @desc 分钟向下取整\n     * @param {Date} [dateTime] 原始时间\n     * @param {int} [minute=10] 取整的分钟数\n     * @returns {Date} 操作后的时间\n     */\n    timeFloor: function (dateTime, minute = 10) {\n        let newDT = new Date(dateTime);\n        newDT.setMinutes(Math.floor(dateTime.getMinutes() / minute) * minute);\n        return newDT;\n    },\n    /**\n     * @desc 分钟向上取整\n     * @param {Date} [dateTime] 原始时间\n     * @param {int} [minute=10] 取整的分钟数\n     * @returns {Date} 操作后的时间\n     */\n    timeCeil: function (dateTime, minute = 10) {\n        dateTime.setMinutes(Math.ceil(dateTime.getMinutes() / minute) * minute);\n        return dateTime;\n    },\n};\n\nlet UtilExtFunction = {\n    /**\n     * @desc 节流函数（{delay}毫秒内任意次调用都只执行第一次）\n     * @param {int} [delay] 节流毫秒数\n     * @param {function} [action] 执行方法\n     * @returns {function} 节流后的方法\n     */\n    throttle: function (delay, action) {\n        let last = 0;\n        return function () {\n            let curr = +new Date()\n            if (curr - last > delay) {\n                action.apply(this, arguments)\n                last = curr\n            }\n        }\n    },\n\n    /**\n     * @desc 防抖函数（{delay}毫秒内任意次调用都只执行最后一次）\n     * @param {int} [delay] 毫秒数\n     * @param {function} [action] 执行方法\n     * @returns {function} 防抖函数\n     */\n    debounce: function (delay, action) {\n        let last;\n        return function () {\n            let ctx = this,\n                args = arguments;\n            clearTimeout(last);\n            last = setTimeout(function () {\n                action.apply(ctx, args)\n            }, delay);\n        }\n    },\n\n}\n\nlet _ = {\n    ...UtilExtIs,\n    ...UtilExtDate,\n    ...UtilExtArray,\n    ...UtilExtString,\n    ...UtilExtObject,\n    ...UtilExtFunction\n};\n\nexport default _;\n"]},"metadata":{},"sourceType":"module"}