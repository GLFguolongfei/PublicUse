{"ast":null,"code":"import * as bridge from '../bridge/bridge';\nimport UtilCommon from './UtilCommon';\nimport UtilDevice from './UtilDevice';\n\nclass UtilUser {\n  constructor(props) {\n    this.userInfo = null;\n  }\n\n  async init() {\n    await this.isLogin();\n    return Promise.resolve();\n  }\n\n  async setUserInfo(userInfo) {\n    this.userInfo = userInfo;\n    return this.userInfo;\n  }\n\n  async getUserInfo() {\n    if (this.isInvalid()) {\n      await this.init();\n    }\n\n    return this.userInfo;\n  }\n\n  async getUserId() {\n    if (this.isInvalid()) {\n      await this.init();\n    }\n\n    return this.userInfo.userId;\n  }\n\n  async getUserToken() {\n    if (this.isInvalid()) {\n      await this.init();\n    }\n\n    return this.userInfo.token;\n  }\n\n  isInvalid() {\n    return !this.userInfo || !this.userInfo.userId || !this.userInfo.token;\n  }\n  /**\n   * @description 判断登录态 支持同步异步使用\n   * @memberof UtilUser\n   * @param {function} callback\n   */\n\n\n  async isLogin(callback) {\n    return new Promise(async resolve => {\n      if (UtilDevice.isApp()) {\n        bridge.callHandler(\"AirportToken\").then(async res => {\n          if (res.result) {\n            await this.setUserInfo({\n              userId: +res.userId,\n              token: res.token\n            });\n            return callback ? callback(true) : resolve(true);\n          } else {\n            await this.setUserInfo({\n              userId: 0,\n              token: null\n            });\n            return callback ? callback(false) : resolve(false);\n          }\n        }).catch(err => {\n          console.error(err);\n          return callback ? callback(false) : resolve(false);\n        });\n      } else {\n        const userId = UtilCommon.urlQuery('uid') || UtilCommon.getResponseHeader().uid;\n        const token = UtilCommon.urlQuery('token') || UtilCommon.getResponseHeader().token;\n        await this.setUserInfo({\n          token,\n          userId: +(userId || '')\n        });\n        return callback ? callback(true) : resolve(true);\n      }\n    });\n  }\n\n}\n\nlet instance;\nexport default (() => {\n  if (!instance) {\n    instance = new UtilUser(); // await instance.init()\n  }\n\n  return instance;\n})();","map":{"version":3,"sources":["/Users/guolongfei/Downloads/vue-cli/publicuse/node_modules/npmglf/lib/utils/UtilUser.js"],"names":["bridge","UtilCommon","UtilDevice","UtilUser","constructor","props","userInfo","init","isLogin","Promise","resolve","setUserInfo","getUserInfo","isInvalid","getUserId","userId","getUserToken","token","callback","isApp","callHandler","then","res","result","catch","err","console","error","urlQuery","getResponseHeader","uid","instance"],"mappings":"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","sourcesContent":["import * as bridge from '../bridge/bridge'\nimport UtilCommon from './UtilCommon'\nimport UtilDevice from './UtilDevice'\n\nclass UtilUser {\n    constructor(props) {\n        this.userInfo = null\n    }\n\n    async init() {\n        await this.isLogin()\n        return Promise.resolve()\n    }\n\n    async setUserInfo(userInfo) {\n        this.userInfo = userInfo\n        return this.userInfo\n    }\n\n    async getUserInfo() {\n        if (this.isInvalid()) {\n            await this.init()\n        }\n        return this.userInfo\n    }\n\n    async getUserId() {\n        if (this.isInvalid()) {\n            await this.init()\n        }\n        return this.userInfo.userId\n    }\n\n    async getUserToken() {\n        if (this.isInvalid()) {\n            await this.init()\n        }\n        return this.userInfo.token\n    }\n\n    isInvalid() {\n        return (!this.userInfo || !this.userInfo.userId || !this.userInfo.token)\n    }\n\n    /**\n     * @description 判断登录态 支持同步异步使用\n     * @memberof UtilUser\n     * @param {function} callback\n     */\n    async isLogin(callback) {\n        return new Promise(async resolve => {\n            if (UtilDevice.isApp()) {\n                bridge.callHandler(\"AirportToken\").then(async (res) => {\n                    if (res.result) {\n                        await this.setUserInfo({userId: +res.userId, token: res.token,})\n                        return (callback ? callback(true) : resolve(true))\n                    } else {\n                        await this.setUserInfo({userId: 0, token: null,})\n                        return (callback ? callback(false) : resolve(false))\n                    }\n                }).catch(err => {\n                    console.error(err)\n                    return (callback ? callback(false) : resolve(false))\n                });\n            } else {\n                const userId = UtilCommon.urlQuery('uid') || UtilCommon.getResponseHeader().uid\n                const token = UtilCommon.urlQuery('token') || UtilCommon.getResponseHeader().token\n\n                await this.setUserInfo({token, userId: +(userId || ''),})\n                return (callback ? callback(true) : resolve(true))\n            }\n        })\n    }\n}\n\nlet instance;\n\nexport default (() => {\n    if (!instance) {\n        instance = new UtilUser()\n        // await instance.init()\n    }\n    return instance\n})()"]},"metadata":{},"sourceType":"module"}